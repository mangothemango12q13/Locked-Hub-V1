local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Locked hub V1.5", "DarkTheme")
local player = game.Players.LocalPlayer
--Variables
local flolen = 0.1
local playerwep = player.Backpack:FindFirstChildWhichIsA("ValueBase")
local playertrait = player.Backpack.Trait:FindFirstChildWhichIsA("ValueBase")
local redon = false
local blueon = false
local greenon = false
local blackon = false
local whiteon = false


--Auto Roll
local AutoRoll = Window:NewTab("AutoRoll")
local Flow = AutoRoll:NewSection("Auto Flow Roll")
--FlowToggleStates
Flow:NewToggle("Red", "ToggleInfo", function(state)
    if state then
        redon = true
    else
        redon = false
    end
end)

Flow:NewToggle("Blue", "ToggleInfo", function(state)
    if state then
        blueon = true
    else
        blueon = false
    end
end)
Flow:NewToggle("Green", "ToggleInfo", function(state)
    if state then
        greenon = true
    else
        greenon = false
    end
end)

Flow:NewToggle("Black", "ToggleInfo", function(state)
    if state then
        blackon = true
    else
        blackon = false
    end
end)

Flow:NewToggle("White", "ToggleInfo", function(state)
    if state then
        whiteon = true
    else
        whiteon = false
    end
end)
--MainFlowGui

local tpfalse = false
Flow:NewToggle("Tp to safe spot", "ToggleInfo", function(state)
    if state then
        tpfalse = true
    else
        tpfalse = false
    end
end)


Flow:NewButton("Auto Roll Flow", "This will auto roll your flow color until you get the desired color", function()
    local player = game.Players.LocalPlayer
    local yen = player.Character.RankSystem.Yen
    local charblue = player.Character.AuraColour.Blue
    local charred = player.Character.AuraColour.Red
    local charGreen = player.Character.AuraColour.Green

    local previousRed, previousGreen, previousBlue = -1, -1, -1 -- Initialize with invalid values to force the first roll

    local function isWithinTolerance(red, green, blue, targetRed, targetGreen, targetBlue, tolerance)
        return math.abs(red - targetRed) <= tolerance and
               math.abs(green - targetGreen) <= tolerance and
               math.abs(blue - targetBlue) <= tolerance
    end

    local tolerance = flolen -- Adjust to desired leniency


    -- Assuming redon, blueon, greenon, whiteon, and blackon are already defined
    if not (redon or blueon or greenon or whiteon or blackon) then
        print("No colors selected for rolling.")
        return
    end

    -- Initial roll to start the process
    game.ReplicatedStorage.rerolls.aurareroll:FireServer()
    print("Initial roll fired.")

    while task.wait(0.2) do
		if tpfalse == true then
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(100, 10000, 100)
		end
        if charred.Value == previousRed and charGreen.Value == previousGreen and charblue.Value == previousBlue then
            print("No color change detected, skipping roll.")
            task.wait(0.5) -- Wait a bit longer before trying again
        else
            -- Check if the current color matches any target
            if redon and isWithinTolerance(charred.Value, charGreen.Value, charblue.Value, 1, 0, 0, tolerance) then
                print("Target color achieved: Red")
                break
            end
            if blueon and isWithinTolerance(charred.Value, charGreen.Value, charblue.Value, 0, 0, 1, tolerance) then
                print("Target color achieved: Blue")
                break
            end
            if greenon and isWithinTolerance(charred.Value, charGreen.Value, charblue.Value, 0, 1, 0, tolerance) then
                print("Target color achieved: Green")
                break
            end
            if whiteon and isWithinTolerance(charred.Value, charGreen.Value, charblue.Value, 1, 1, 1, tolerance) then
                print("Target color achieved: White")
                break
            end
            if blackon and isWithinTolerance(charred.Value, charGreen.Value, charblue.Value, 0, 0, 0, tolerance) then
                print("Target color achieved: Black")
                break
            end

            -- Update previous color values
            previousRed, previousGreen, previousBlue = charred.Value, charGreen.Value, charblue.Value

            -- Fire remote event to roll again
            game.ReplicatedStorage.rerolls.aurareroll:FireServer()

            -- Debug print to track rolling progress
            print("Rolling... Current Values - Red:", charred.Value, "Green:", charGreen.Value, "Blue:", charblue.Value)
        end
    end
end)


Flow:NewButton("Rollback", "Rejoins with your old data", function()
	local player = game.Players.LocalPlayer
	local yen = player.Character.RankSystem.Yen
	local args = {
		[1] = "Right",
		[2] = "F\255"
	}
	game:GetService("ReplicatedStorage"):WaitForChild("rerolls"):WaitForChild("KeybindChange"):FireServer(unpack(args))
	task.wait(0.2)

	local TeleportService = game:GetService("TeleportService")
	local HttpService = game:GetService("HttpService")
	local PlaceID = game.PlaceId

	-- Fetch server data
	local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))

	for _, server in ipairs(servers.data) do
		-- Skip current server and check latency
		if server.id ~= game.JobId and server.playing < server.maxPlayers then
			local latency = server.ping or server.RequestQueueSize -- Approximation
			if latency and latency < 100 then
				TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
				break
			end
		end
	end

	return

end)

local flowlentext = Flow:NewLabel("CurrentFlowLeniancy: " .. flolen)
Flow:NewTextBox("FlowColorLenianacy", "How close a color can get to pure (Below 1)", function(txt)
	if tonumber(txt) then
        if tonumber(txt) < 1 then
            flowlentext:UpdateLabel("CurrentFlowLeniancy: " .. txt)
            flolen = tonumber(txt)
        end
    end
end)


local WeaponTrait = AutoRoll:NewSection("Weapon and Trait Auto roll")
local WeaponSelected
local TraitSelected
local flowbufflen = 0.1
WeaponTrait:NewDropdown("Weapon", "DropdownInf", {"Accelerate", "AceEater", "Acrobatic", "Chigiri", "CopyCat", "DirectShot", "Emperor", "Formless", "GodSpeed", "IronHead", "King", "Kunigami", "Leader", "LongLegs", "Monster", "Nagi", "Neurotic", "Planetary", "Repel", "Riptide", "Snatch", "Serpent"}, function(currentOption)
    WeaponSelected = currentOption
end)
WeaponTrait:NewDropdown("Trait", "DropdownInf", {"Ambidextrous", "Athlete", "Bunnys", "Clamps", "Claw", "Diver", "Egoist", "Fortune", "GoldenZone", "LongStrides", "Metavision", "NoLook", "Powerhouse", "Puppeteer", "QuickDraw", "Revolver", "Ripper", "Surf", "Tank", "Tireless", "TwinGuns", "Unbreakable"}, function(currentOption)
    TraitSelected = currentOption
end)
local flobufflentext = Flow:NewLabel("CurrentFlowBuffLeniany: " .. flowbufflen)
Flow:NewTextBox("FlowBuffLeniancy", "How close a color can get to pure (Below 1)", function(txt)
	if tonumber(txt) then
        if tonumber(txt) <= 0.1 then
            flobufflentext:UpdateLabel("CurrentFlowBuffLeniany: " .. txt)
            flowbufflen = tonumber(txt)
        end
    end
end)

local weplabel = WeaponTrait:NewLabel("Current Weapon: " .. playerwep.Name)
local traitlabel = WeaponTrait:NewLabel("Current Trait: " .. playertrait.Name)
--Weapon And Trait rolling
WeaponTrait:NewButton("Auto Roll Weapon", "This will auto roll your weapon until you get the desired weapon", function()
    local player = game.Players.LocalPlayer
    local weapontofind = WeaponSelected
    local currentWeaponName = nil -- To track the current weapon

    while task.wait(0.3) do -- Add wait for stability
        local foundWeapon = player.Backpack:FindFirstChildWhichIsA("ValueBase")
		print(foundWeapon.Name)
        if foundWeapon and foundWeapon.Name == weapontofind then
            print("Desired weapon acquired:", foundWeapon.Name)
            break
        end

        -- Check if weapon value has changed
        if foundWeapon and foundWeapon.Name ~= currentWeaponName then
            currentWeaponName = foundWeapon.Name -- Update to the new value
            print("Weapon changed. Current weapon:", currentWeaponName)
        else
            -- Value didn't change, skip rolling
            print("No weapon change detected, waiting...")
        end

        -- Send the remote event to roll again if no match
        game.ReplicatedStorage.rerolls.specreroll:FireServer(2)
    end
end)

WeaponTrait:NewButton("Auto Roll Trait", "This will auto roll your trait until you get the desired trait", function()
    local player = game.Players.LocalPlayer
    local traittofind = TraitSelected
    local currentTraitName = nil -- To track the current trait

    while task.wait(0.3) do -- Add wait for stability
        local foundTrait = player.Backpack.Trait:FindFirstChildWhichIsA("ValueBase")
        if foundTrait and foundTrait.Name == traittofind then
            print("Desired trait acquired:", foundTrait.Name)
            break
        end

        -- Check if trait value has changed
        if foundTrait and foundTrait.Name ~= currentTraitName then
            currentTraitName = foundTrait.Name -- Update to the new value
            print("Trait changed. Current trait:", currentTraitName)
        else
            -- Value didn't change, skip rolling
            print("No trait change detected, waiting...")
        end

        -- Send the remote event to roll again if no match
        game.ReplicatedStorage.rerolls.traitreroll:FireServer(2)
    end
end)


WeaponTrait:NewButton("Auto Roll Flow Buff", "This will auto roll your flow buff until you get the desired flow buff", function()
    local player = game.Players.LocalPlayer
    local desiredBuffValue = 1.4 + flowbufflen

    while math.abs(game.Workspace[player.Name].AuraColour.Buff:GetAttribute("BuffValue") - desiredBuffValue) > flowbufflen do
        game.ReplicatedStorage.rerolls.buffreroll:FireServer()
        print(game.Workspace[player.Name].AuraColour.Buff:GetAttribute("BuffValue"))
        task.wait(0.1)
    end

    print("Desired flow buff achieved: " .. game.Workspace[player.Name].AuraColour.Buff:GetAttribute("BuffValue"))
end)
-- Server Crash
local CrashServer = Window:NewTab("Server Crashing")
local VfxEmotes = CrashServer:NewSection("VfxEmotes")
local PartEmotes = CrashServer:NewSection("PartEmotes")
-- Server Crash Variables

-- Effects Variables
local cupidvfx = false
local puzzplepiecevfx = false
-- Part variables
local heartspart = false
local reoball = false
local anklebreak = false
-- Main Server Crash
VfxEmotes:NewToggle("Cupid", "ToggleInfo", function(state)
    if state then
        cupidvfx = true
    else
        cupidvfx = false
    end
end)

VfxEmotes:NewToggle("Puzzle Pieces", "ToggleInfo", function(state)
    if state then
        puzzplepiecevfx = true
    else
        puzzplepiecevfx = false
    end
end)

PartEmotes:NewToggle("Ball", "ToggleInfo", function(state)
    if state then
        heartspart = true
    else
        heartspart = false
    end
end)

PartEmotes:NewToggle("Hearts", "ToggleInfo", function(state)
    if state then
        reoball = true
    else
        reoball = false
    end
end)

PartEmotes:NewToggle("Ankle Break", "ToggleInfo", function(state)
    if state then
        anklebreak = true
    else
        anklebreak = false
    end
end)

	-- Buttons Server Crash
PartEmotes:NewButton("Server Crash", "Crash the server with whatever emotes you picked", function()
coroutine.wrap(function()
    coroutine.wrap(function()
        if anklebreak == true then
            -- Define ProductRepeat function
            function ProductRepeat(tab, repeatCount)
                local result = { {} }
                for _ = 1, repeatCount do
                    local newResult = {}
                    for _, r in ipairs(result) do
                        for _, v in ipairs(tab) do
                            table.insert(newResult, { v, unpack(r) })
                        end
                    end
                    result = newResult
                end
                return result
            end

            -- Safely find Remote object
            local Remote = game.ReplicatedStorage:FindFirstChild("Ragdoll")
            if Remote then
                for Amount = 1, 4 do
                    local Args = ProductRepeat(
                        { "LongLegs", 1, 5000000, game.Players.LocalPlayer, true, false,
                          game.Players.LocalPlayer.Character.HumanoidRootPart.Position,
                          game.Players.LocalPlayer.Character.HumanoidRootPart },
                        Amount
                    )
                    for _, Argums in ipairs(Args) do
                        Remote:FireServer(unpack(Argums))
                    end
                end
            else
                warn("Remote 'Ragdoll' not found in ReplicatedStorage.")
            end
        end
    end)()

if cupidvfx then
    task.spawn(function()
        while task.wait(0.01) do
            for i = 1, 10 do
          	  game.ReplicatedStorage.EmoteVFX:FireServer("CUPID")
			end
        end
    end)
end

if puzzplepiecevfx then
    task.spawn(function()
        while task.wait(0.01) do
            for i = 1, 10 do
          	  game.ReplicatedStorage.EmoteVFX:FireServer("PUZZLE")
			end
        end
    end)
end

if heartspart then
    task.spawn(function()
        while task.wait(0.01) do
			for i = 1, 10 do
          	  game.ReplicatedStorage.EmoteVFX:FireServer("HEART")
			end
        end
    end)
end

if reoball then
    task.spawn(function()
        while task.wait(0.01) do
            for i = 1, 10 do
          	  game.ReplicatedStorage.EmoteVFX:FireServer("READY")
			end
        end
    end)
end

end)()

end)

--Duping
local DupeWindow = Window:NewTab("Duping")
local MainDuping = DupeWindow:NewSection("Main")

MainDuping:NewButton("Dupe Other Slot To Current", "Dupes everything on your other slot to the current slot.", function()
    local plr = game.Players.LocalPlayer
    plr.Character.Humanoid.Health = 0
    
    task.wait(10)
    
    game.ReplicatedStorage.rerolls.Slots:FireServer("1")

    task.wait(2)
    	local TeleportService = game:GetService("TeleportService")
	local HttpService = game:GetService("HttpService")
	local PlaceID = game.PlaceId

	-- Fetch server data
	local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))

	for _, server in ipairs(servers.data) do
		-- Skip current server and check latency
		if server.id ~= game.JobId and server.playing < server.maxPlayers then
			local latency = server.ping or server.RequestQueueSize -- Approximation
			if latency and latency < 100 then
				TeleportService:TeleportToPlaceInstance(PlaceID, server.id, player)
				break
			end
		end
	end
end)

--Keybind
WeaponTrait:NewKeybind("ToggleUI", "wtv u wanna use to close and open tis", Enum.KeyCode.LeftAlt, function()
	Library:ToggleUI()
end)
-- Loops
WeaponTrait:NewButton("RedeemCode", "This will auto roll your trait until you get the desired trait", function()
    local code = game.ReplicatedStorage.SendCode
    code:FireServer("120KFAVOURITE")
    code:FireServer("125MILVISITS")
    code:FireServer("DRAGONHEADER")
    code:FireServer("150KMEMBERS")
    code:FireServer("70KLIKES")
    code:FireServer("MEDALXLOCKED")
    code:FireServer("10KSUBS")
    code:FireServer("SEASON5WINNER")
end)
while task.wait(0.2) do
    weplabel:UpdateLabel(player.Backpack:FindFirstChildWhichIsA("ValueBase").Name)
    playerwep = player.Backpack:FindFirstChildWhichIsA("ValueBase").Name

     traitlabel:UpdateLabel(player.Backpack.Trait:FindFirstChildWhichIsA("ValueBase").Name)
    playertrait = player.Backpack.Trait:FindFirstChildWhichIsA("ValueBase").Name
end
